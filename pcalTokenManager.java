/* Generated By:JJTree&JavaCC: Do not edit this line. pcalTokenManager.java */
import java.io.*;

/** Token Manager. */
public class pcalTokenManager implements pcalConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x6L) != 0L)
            return 7;
         if ((active0 & 0x600000L) != 0L || (active1 & 0x37c0280000001800L) != 0L || (active2 & 0xc2fd060207c4ffffL) != 0L || (active3 & 0x1L) != 0L)
            return 14;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 74;
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 98;
            return 25;
         }
         if ((active0 & 0x480000000000L) != 0L || (active1 & 0x60L) != 0L)
         {
            jjmatchedKind = 98;
            return 39;
         }
         if ((active0 & 0xffffb3fb00000000L) != 0L || (active1 & 0x17ff12387L) != 0L)
         {
            jjmatchedKind = 98;
            return 5;
         }
         return -1;
      case 1:
         if ((active0 & 0xffdefbfb00000000L) != 0L || (active1 & 0x177d123e7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active0 & 0x400000L) != 0L)
            return 16;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 24;
         }
         if ((active1 & 0x2000000000000000L) != 0L || (active2 & 0x1L) != 0L)
            return 13;
         if ((active0 & 0x21000000000000L) != 0L || (active1 & 0x8200000L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active0 & 0xfddedbb300000000L) != 0L || (active1 & 0x173d123e6L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 2;
            }
            return 5;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 2;
            }
            return 23;
         }
         if ((active0 & 0x200204800000000L) != 0L || (active1 & 0x4000001L) != 0L)
            return 5;
         return -1;
      case 3:
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 3;
            }
            return 22;
         }
         if ((active0 & 0xb81699f300000000L) != 0L || (active1 & 0x72112346L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 3;
            }
            return 5;
         }
         if ((active0 & 0x45c8420000000000L) != 0L || (active1 & 0x101c000a0L) != 0L)
            return 5;
         return -1;
      case 4:
         if ((active0 & 0x281489f300000000L) != 0L || (active1 & 0x30112206L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 4;
            }
            return 5;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 4;
            }
            return 21;
         }
         if ((active0 & 0x9002100000000000L) != 0L || (active1 & 0x42000140L) != 0L)
            return 5;
         return -1;
      case 5:
         if ((active0 & 0x8f300000000L) != 0L || (active1 & 0x216L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
            return 5;
         }
         if ((active0 & 0x2814810000000000L) != 0L || (active1 & 0x30112000L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active0 & 0x87200000000L) != 0L || (active1 & 0x16L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 6;
            }
            return 5;
         }
         if ((active0 & 0x8100000000L) != 0L || (active1 & 0x200L) != 0L)
            return 5;
         return -1;
      case 7:
         if ((active0 & 0x86200000000L) != 0L || (active1 & 0x12L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
            return 5;
         }
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 5;
         return -1;
      case 8:
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 8;
            }
            return 5;
         }
         if ((active0 & 0x82200000000L) != 0L || (active1 & 0x2L) != 0L)
            return 5;
         return -1;
      case 9:
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x10L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 8);
      case 35:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000000000L, 0x0L);
      case 36:
         jjmatchedKind = 187;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x1000000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L, 0x0L);
      case 38:
         jjmatchedKind = 171;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L, 0x0L);
      case 40:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x2812100000000L, 0x0L);
      case 41:
         return jjStopAtPos(0, 25);
      case 42:
         jjmatchedKind = 173;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000000L, 0x0L);
      case 43:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 11);
      case 45:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2100000020000L, 0x1000000000L, 0x0L);
      case 46:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x18000000L, 0x0L);
      case 47:
         jjmatchedKind = 167;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1400000000000L, 0x4000000000L, 0x0L);
      case 58:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x4000000000000L, 0x100000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 12);
      case 60:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x8000040000008000L, 0x200000L, 0x0L);
      case 61:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x4010010000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x800000000000000L, 0x0L, 0x0L);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000000000L, 0x0L);
      case 64:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1002000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x810000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8200000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20100000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400080L, 0x0L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L, 0x0L);
      case 92:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_0(0x600000L, 0x37c0280000001800L, 0xc2fd06020784ffffL, 0x1L);
      case 93:
         return jjStopAtPos(0, 27);
      case 94:
         jjmatchedKind = 193;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4L);
      case 95:
         return jjStopAtPos(0, 16);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800800200000000L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8010100000000000L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4800000000L, 0x0L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x86200100000000L, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200021000000000L, 0x0L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x2L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000a000000000L, 0x0L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x1L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x480000000000L, 0x60L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40010000000000L, 0x4L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x408000000000000L, 0x0L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         jjmatchedKind = 163;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x40000L, 0x30000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 29);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x20000000000L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 184);
         break;
      case 35:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 186);
         break;
      case 36:
         if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 37:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         break;
      case 38:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 172);
         break;
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 43:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0x100000000L, active3, 0L);
      case 45:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0x2000000000L, active3, 0L);
      case 46:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800010000000L, active3, 0L);
      case 47:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000000000L, active3, 0L);
      case 58:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L);
      case 60:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 61:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L);
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      case 63:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 189);
         break;
      case 64:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         break;
      case 65:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000100L, active2, 0L, active3, 0L);
      case 69:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0L);
      case 70:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 85, 5);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x402000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 91, 5);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000200L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2100000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 92:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L);
      case 93:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 94:
         if ((active3 & 0x4L) != 0L)
            return jjStopAtPos(1, 194);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0xc0000100000000L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x18000000000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L, active2, 0x40000002840000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L, active2, 0x40000000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000104800000000L, active1, 0x80000000024L, active2, 0L, active3, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 5);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1400000000000000L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x48010000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x404000000200000L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x82000200000000L, active1, 0x2000000000000000L, active2, 0x1L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000400000L, active1, 0x2L, active2, 0L, active3, 0L);
      case 111:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4300000000000000L, active1, 0x10L, active2, 0x5020200000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xeL, active3, 0L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 5);
         return jjMoveStringLiteralDfa2_0(active0, 0x901000a000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0xc08000000000fff0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x41L, active2, 0x4000000L, active3, 0x1L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 124:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 103);
         break;
      case 41:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 165);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 168);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 175);
         break;
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 46:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 156);
         break;
      case 61:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 114);
         break;
      case 62:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(2, 82);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 106);
         break;
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2200L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1800000L, active2, 0L, active3, 0L);
      case 84:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 5);
         break;
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000040000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8048000000000000L, active1, 0x2400000000000000L, active2, 0L, active3, 0L);
      case 102:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 124);
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000420000000000L, active1, 0x100000000L, active2, 0x48040000000030L, active3, 0L);
      case 108:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(2, 128);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x4L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x10L, active2, 0x5000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10080a000400000L, active1, 0x300000000000000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000040L, active2, 0x200000000L, active3, 0x1L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0xc0000000000003c0L, active3, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 5);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 185);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L, active2, 0xeL, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x882000000000000L, active1, 0x80000000000000L, active2, 0x20000000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x6404000100000000L, active1, 0L, active2, 0x84000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000200fc00L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 177);
         break;
      case 62:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 108);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 69:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 5);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 5);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2010000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 5);
         break;
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40002000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000100L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x2L, active2, 0x80000000000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc00L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0xb000000000L, active1, 0L, active2, 0xc000000000003000L, active3, 0L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x800010100000000L, active1, 0x40L, active2, 0x6L, active3, 0L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 5);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 104:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2104000000000L, active1, 0L, active2, 0x4000004000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10020200000000L, active3, 0x1L);
      case 109:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x880000000000L, active1, 0L, active2, 0x20L, active3, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 5);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 5);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x1010000000000000L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 111:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L, active2, 0x1000000040008L, active3, 0L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 5);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 5);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(3, 151);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 153);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000004L, active2, 0xc000L, active3, 0L);
      case 113:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 122);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 125);
         break;
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L, active2, 0x3c0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x200000000000000L, active2, 0x1000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 118:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 170);
         break;
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000200L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 78:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 82:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 5);
         break;
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L, active2, 0x4000020000000000L, active3, 0L);
      case 99:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(4, 182);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0x8000000002004L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x408a000000000L, active1, 0x200000000000000L, active2, 0x1000020L, active3, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 5);
         break;
      case 103:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(4, 120);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000400000L, active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 107:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 5);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000000L, active2, 0x4000000000000L, active3, 0L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x4100000000L, active1, 0L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0x4000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 5);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 183);
         return jjMoveStringLiteralDfa5_0(active0, 0x2800000200000000L, active1, 0x40000000000002L, active2, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xcc00L, active3, 0L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 5);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(4, 146);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 176);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x10L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000002000003c0L, active3, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      case 69:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 5);
         break;
      case 71:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 5);
         break;
      case 78:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 5);
         break;
      case 84:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 5);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 5);
         break;
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc0L, active3, 0L);
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 5);
         break;
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x2100000000L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1400000000ec04L, active3, 0L);
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x5200000000L, active1, 0x2L, active2, 0x8000000000000L, active3, 0L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 5);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 154);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 112:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 119);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(5, 190);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(5, 191);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x300L, active3, 0L);
      case 113:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 121);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(5, 133);
         break;
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x14L, active2, 0x1000000L, active3, 0L);
      case 115:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 161);
         else if ((active3 & 0x1L) != 0L)
            return jjStopAtPos(5, 192);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L, active2, 0x20000000000L, active3, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L, active2, 0x8L, active3, 0L);
      case 118:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 107);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 5);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x16L, active2, 0L);
      case 104:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 169);
         break;
      case 111:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(6, 131);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 113:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(6, 130);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(6, 141);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L, active2, 0x8000000000000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 5);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 5);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 178);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10003c0L);
      case 116:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 180);
         return jjMoveStringLiteralDfa7_0(active0, 0x4200000000L, active1, 0L, active2, 0x8800L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(6, 118);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(7, 179);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1008bc0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x84000000000L, active1, 0x10L, active2, 0L);
      case 108:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 5);
         break;
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 5);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 5);
         break;
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 5);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 113:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(8, 139);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(8, 143);
         break;
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 5);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x280L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x280L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 38, 5);
         break;
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 5);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(9, 152);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, 0L, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 113:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(10, 135);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(10, 137);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, 0L, active2, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 24:
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 35)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 102)
                        kind = 102;
                  }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(3);
                  break;
               case 8:
                  if (curChar == 42)
                     kind = 102;
                  break;
               case 9:
                  if (curChar == 35)
                     kind = 102;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 92)
                     jjAddStates(0, 1);
                  else if (curChar == 94)
                     jjAddStates(2, 4);
                  else if (curChar == 126)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  if (curChar == 118)
                     jjAddStates(5, 6);
                  else if (curChar == 115)
                     jjAddStates(7, 8);
                  else if (curChar == 99)
                     jjAddStates(9, 10);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 45;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 94)
                     jjAddStates(2, 4);
                  break;
               case 10:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 11:
                  if (curChar == 116 && kind > 74)
                     kind = 74;
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 103 && kind > 74)
                     kind = 74;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 99)
                     jjAddStates(9, 10);
                  break;
               case 19:
                  if (curChar == 116 && kind > 67)
                     kind = 67;
                  break;
               case 20:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 26:
                  if (curChar == 115 && kind > 67)
                     kind = 67;
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 115)
                     jjAddStates(7, 8);
                  break;
               case 35:
                  if (curChar == 103 && kind > 42)
                     kind = 42;
                  break;
               case 36:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 121 && kind > 42)
                     kind = 42;
                  break;
               case 41:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 118)
                     jjAddStates(5, 6);
                  break;
               case 48:
                  if (curChar == 101 && kind > 34)
                     kind = 34;
                  break;
               case 49:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 115 && kind > 34)
                     kind = 34;
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 10)
                     kind = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   14, 17, 7, 8, 9, 54, 62, 39, 46, 25, 33, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\54", "\73", 
"\72", "\56", "\100", "\137", "\72\75", "\75\75", "\75", "\176\75", "\134\151\156", 
"\134\156\157\164\151\156", "\174\174", "\50", "\51", "\133", "\135", "\173", "\175", "\74\74", "\76\76", 
"\145\170\164\145\156\144\163", "\141\154\147\157\162\151\164\150\155", null, "\144\145\146", 
"\146\165\156\143\164\151\157\156", "\160\162\157\143\145\144\165\162\145", 
"\144\145\146\151\156\151\164\151\157\156", "\160\162\157\143\145\163\163", "\164\150\162\145\141\144", 
"\146\141\151\162", null, "\163\171\155\155\145\164\162\151\143", "\142\145\147\151\156", 
"\145\156\144", "\163\153\151\160", "\141\164\157\155\151\143", "\151\146", 
"\145\154\163\151\146", "\145\151\164\150\145\162", "\167\150\145\156", "\142\162\141\156\143\150", 
"\157\162", "\164\150\145\156", "\145\154\163\145", "\154\157\157\160", "\146\157\162", 
"\167\151\164\150", "\141\163\163\145\162\164", "\160\162\151\156\164", 
"\162\145\164\165\162\156", "\147\157\164\157", "\142\162\145\141\153", "\162\165\156", 
"\151\156\166\141\162\151\141\156\164", "\164\145\155\160\157\162\141\154", null, 
"\143\157\156\163\164\162\141\151\156\164", "\163\145\154\146", "\163\165\160\145\162", "\124\122\125\105", 
"\106\101\114\123\105", "\102\117\117\114\105\101\116", null, "\134\101", "\134\105", 
"\103\110\117\117\123\105", "\133\135", "\74\76", "\105\130\103\105\120\124", "\55\76", "\174\55\76", 
"\41", "\123\124\122\111\116\107", "\111\106", "\124\110\105\116", 
"\105\114\123\105", "\103\101\123\105", "\117\124\110\105\122", "\114\105\124", "\111\116", 
"\104\117\115\101\111\116", "\123\125\102\123\105\124", "\125\116\111\117\116", "\55", "\115\141\151\156", 
null, null, null, null, null, null, "\44\44\44", "\75\76", "\176\76", "\74\75\76", 
"\134\145\161\165\151\166", "\55\53\55\76", "\134\57", "\57\134", "\43", "\57\75", "\55\174", "\72\72\75", 
"\74", "\75\174", "\76", "\134\141\160\160\162\157\170", "\134\141\163\171\155\160", 
"\134\143\157\156\147", "\134\144\157\164\145\161", "\134\147\145\161", "\76\75", "\134\147\147", 
"\134\154\145\161", "\75\74", "\74\75", "\134\154\154", "\134\160\162\145\143", 
"\134\160\162\145\143\145\161", "\134\160\162\157\160\164\157", "\134\163\151\155", 
"\134\163\151\155\145\161", "\134\163\161\163\165\142\163\145\164", 
"\134\163\161\163\165\142\163\145\164\145\161", "\134\163\161\163\165\160\163\145\164", 
"\134\163\161\163\165\160\163\145\164\145\161", "\134\163\165\142\163\145\164", "\134\163\165\142\163\145\164\145\161", 
"\134\163\165\143\143", "\134\163\165\143\143\145\161", "\134\163\165\160\163\145\164", 
"\134\163\165\160\163\145\164\145\161", "\174\55", "\174\75", "\134\143\144\157\164", "\100\100", "\72\76", "\74\72", 
"\134", "\134\143\141\160", "\134\151\156\164\145\162\163\145\143\164", 
"\134\143\165\160", "\134\165\156\151\157\156", "\56\56", "\56\56\56", "\45", "\53\53", "\53", 
"\50\53\51", "\134\157\160\154\165\163", "\45\45", "\174", "\55\55", "\50\55\51", "\57\57", 
"\57", "\50\57\51", "\134\157\163\154\141\163\150", "\134\144\151\166", "\46", 
"\46\46", "\52", "\52\52", "\50\56\51", "\134\157\144\157\164", "\50\134\130\51", 
"\134\157\164\151\155\145\163", "\134\142\151\147\143\151\162\143", "\134\142\165\154\154\145\164", 
"\134\157", "\134\143\151\162\143", "\134\163\164\141\162", "\41\41", "\134\167\162", 
"\43\43", "\44", "\44\44", "\77\77", "\134\163\161\143\141\160", 
"\134\163\161\143\165\160", "\134\165\160\154\165\163", "\136", "\136\136", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
   "WithinString",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffa01L, 0xffffffc7ffffffffL, 0xffffffffffffffffL, 0x7L, 
};
static final long[] jjtoSkip = {
   0x17eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x480L, 0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public pcalTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public pcalTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  matchedToken.image = image.toString().substring(0, image.length()-1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
