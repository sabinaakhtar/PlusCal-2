/* Generated By:JavaCC: Do not edit this line. pcalTreeConstants.java Version 5.0 */
public interface pcalTreeConstants
{
  public int JJTSOURCEFILE = 0;
  public int JJTMODEL = 1;
  public int JJTHEADER = 2;
  public int JJTALGORITHMNAME = 3;
  public int JJTHEADER_EXTENDS = 4;
  public int JJTHEADER_CONSTANTS = 5;
  public int JJTALGORITHM = 6;
  public int JJTPROCESS = 7;
  public int JJTPROPERTYSECTIONOUTSIDEPROCESS = 8;
  public int JJTDECLARATIONS = 9;
  public int JJTVARDECLS = 10;
  public int JJTVARDECL = 11;
  public int JJTPROCESSHEADER = 12;
  public int JJTVOID = 13;
  public int JJTDEFDECL = 14;
  public int JJTFUNCTDECL = 15;
  public int JJTPARAMDECLS = 16;
  public int JJTPARAMDECL = 17;
  public int JJTPARAMINSTANCES = 18;
  public int JJTPARAMINSTANCE = 19;
  public int JJTPREFIX = 20;
  public int JJTSTATEMENTS = 21;
  public int JJTSTATEMENT = 22;
  public int JJTINSTRUCTION = 23;
  public int JJTSKIP = 24;
  public int JJTATOMIC = 25;
  public int JJTASSIGNSINGLE = 26;
  public int JJTASSIGNLHS = 27;
  public int JJTSELECTOR = 28;
  public int JJTIFELSE = 29;
  public int JJTWHEN = 30;
  public int JJTEITHER = 31;
  public int JJTBRANCH = 32;
  public int JJTBRANCHARM = 33;
  public int JJTLOOP = 34;
  public int JJTFOREACH = 35;
  public int JJTWITH = 36;
  public int JJTPASSERT = 37;
  public int JJTPRINT = 38;
  public int JJTPROCEDURECALL = 39;
  public int JJTDEFINITIONCALL = 40;
  public int JJTPRETURN = 41;
  public int JJTPGOTO = 42;
  public int JJTPBREAK = 43;
  public int JJTRUN = 44;
  public int JJTSYMMETRY = 45;
  public int JJTFAIRNESS = 46;
  public int JJTPROPERTY = 47;
  public int JJTINVARIANT = 48;
  public int JJTTEMPORAL = 49;
  public int JJTBOUNDS = 50;
  public int JJTBOUND = 51;
  public int JJTINSTANCE = 52;
  public int JJTCONFIG = 53;
  public int JJTCONSTANTDEFS = 54;
  public int JJTCONSTANTDEF = 55;
  public int JJTCONSTRAINT = 56;
  public int JJTEXPRESSION = 57;
  public int JJTQUANTEXPRESSION = 58;
  public int JJTCONDEXPRESSION = 59;
  public int JJTCASEEXPRESSION = 60;
  public int JJTCASEARM = 61;
  public int JJTLETEXPRESSION = 62;
  public int JJTOPERATORDEFINITION = 63;
  public int JJTNONFIXLHS = 64;
  public int JJTIDOROPDECL = 65;
  public int JJTFUNCTIONDEFINITION = 66;
  public int JJTINFIXOPERATOR = 67;
  public int JJTPREFIXOPERATOR = 68;
  public int JJTPOSTFIXOPERATOR = 69;
  public int JJTEXPATOMIC = 70;
  public int JJTARGUMENTS = 71;
  public int JJTSETENUMERATION = 72;
  public int JJTSETCOMPREHENSION = 73;
  public int JJTFUNCTCONSTRUCTION = 74;
  public int JJTRECORDCONSTRUCTION = 75;
  public int JJTRECORD = 76;
  public int JJTFUNCTSET = 77;
  public int JJTRECORDSET = 78;
  public int JJTFUNCTEXCEPT = 79;
  public int JJTOVERRIDE = 80;


  public String[] jjtNodeName = {
    "sourcefile",
    "model",
    "header",
    "algorithmName",
    "header_extends",
    "header_constants",
    "algorithm",
    "process",
    "propertySectionOutsideProcess",
    "declarations",
    "varDecls",
    "varDecl",
    "processHeader",
    "void",
    "defDecl",
    "functDecl",
    "paramDecls",
    "paramDecl",
    "paramInstances",
    "paramInstance",
    "PREFIX",
    "statements",
    "statement",
    "instruction",
    "skip",
    "atomic",
    "assignSingle",
    "assignLHS",
    "selector",
    "ifelse",
    "when",
    "either",
    "branch",
    "branchArm",
    "loop",
    "foreach",
    "with",
    "pAssert",
    "print",
    "procedureCall",
    "definitionCall",
    "pReturn",
    "pGoto",
    "pBreak",
    "run",
    "symmetry",
    "fairness",
    "property",
    "invariant",
    "temporal",
    "bounds",
    "bound",
    "instance",
    "config",
    "constantDefs",
    "constantDef",
    "constraint",
    "expression",
    "quantExpression",
    "condExpression",
    "caseExpression",
    "caseArm",
    "letExpression",
    "operatorDefinition",
    "nonfixLHS",
    "idOrOpdecl",
    "functionDefinition",
    "infixOperator",
    "prefixOperator",
    "postfixOperator",
    "expAtomic",
    "arguments",
    "setEnumeration",
    "setComprehension",
    "functConstruction",
    "recordConstruction",
    "record",
    "functSet",
    "recordSet",
    "functExcept",
    "override",
  };
}
/* JavaCC - OriginalChecksum=b3302ec05bbbd9745d7b11eda9b440ca (do not edit this line) */
