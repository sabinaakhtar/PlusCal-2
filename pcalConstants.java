/* Generated By:JJTree&JavaCC: Do not edit this line. pcalConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface pcalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STRING = 9;
  /** RegularExpression Id. */
  int COMMA = 11;
  /** RegularExpression Id. */
  int SEMICOLON = 12;
  /** RegularExpression Id. */
  int COLON = 13;
  /** RegularExpression Id. */
  int DOT = 14;
  /** RegularExpression Id. */
  int AT = 15;
  /** RegularExpression Id. */
  int UNDERSCORE = 16;
  /** RegularExpression Id. */
  int ASSIGN = 17;
  /** RegularExpression Id. */
  int DEQ = 18;
  /** RegularExpression Id. */
  int EQUAL = 19;
  /** RegularExpression Id. */
  int NEQUAL = 20;
  /** RegularExpression Id. */
  int IN = 21;
  /** RegularExpression Id. */
  int NOTIN = 22;
  /** RegularExpression Id. */
  int PARALLEL = 23;
  /** RegularExpression Id. */
  int LPAR = 24;
  /** RegularExpression Id. */
  int RPAR = 25;
  /** RegularExpression Id. */
  int LBRAKK = 26;
  /** RegularExpression Id. */
  int RBRAKK = 27;
  /** RegularExpression Id. */
  int LBRACE = 28;
  /** RegularExpression Id. */
  int RBRACE = 29;
  /** RegularExpression Id. */
  int LTUPLE = 30;
  /** RegularExpression Id. */
  int RTUPLE = 31;
  /** RegularExpression Id. */
  int EXTENDS = 32;
  /** RegularExpression Id. */
  int ALGORITHM = 33;
  /** RegularExpression Id. */
  int VARIABLE = 34;
  /** RegularExpression Id. */
  int DEF = 35;
  /** RegularExpression Id. */
  int FUNCTION = 36;
  /** RegularExpression Id. */
  int PROCEDURE = 37;
  /** RegularExpression Id. */
  int DEFINITION = 38;
  /** RegularExpression Id. */
  int PROCESS = 39;
  /** RegularExpression Id. */
  int THREAD = 40;
  /** RegularExpression Id. */
  int FAIR = 41;
  /** RegularExpression Id. */
  int STRONG = 42;
  /** RegularExpression Id. */
  int SYMMETRY = 43;
  /** RegularExpression Id. */
  int BEGIN = 44;
  /** RegularExpression Id. */
  int END = 45;
  /** RegularExpression Id. */
  int PSKIP = 46;
  /** RegularExpression Id. */
  int ATOMIC = 47;
  /** RegularExpression Id. */
  int IF = 48;
  /** RegularExpression Id. */
  int ELSIF = 49;
  /** RegularExpression Id. */
  int EITHER = 50;
  /** RegularExpression Id. */
  int WHEN = 51;
  /** RegularExpression Id. */
  int BRANCH = 52;
  /** RegularExpression Id. */
  int OR = 53;
  /** RegularExpression Id. */
  int THEN = 54;
  /** RegularExpression Id. */
  int ELSE = 55;
  /** RegularExpression Id. */
  int LOOP = 56;
  /** RegularExpression Id. */
  int FOR = 57;
  /** RegularExpression Id. */
  int WITH = 58;
  /** RegularExpression Id. */
  int ASSERT = 59;
  /** RegularExpression Id. */
  int PRINT = 60;
  /** RegularExpression Id. */
  int RETURN = 61;
  /** RegularExpression Id. */
  int GOTO = 62;
  /** RegularExpression Id. */
  int BREAK = 63;
  /** RegularExpression Id. */
  int RUN = 64;
  /** RegularExpression Id. */
  int INVARIANT = 65;
  /** RegularExpression Id. */
  int TEMPORAL = 66;
  /** RegularExpression Id. */
  int CONSTANT = 67;
  /** RegularExpression Id. */
  int CONSTRAINT = 68;
  /** RegularExpression Id. */
  int SELF = 69;
  /** RegularExpression Id. */
  int SUPER = 70;
  /** RegularExpression Id. */
  int TRUE = 71;
  /** RegularExpression Id. */
  int FALSE = 72;
  /** RegularExpression Id. */
  int BOOLEAN = 73;
  /** RegularExpression Id. */
  int LNOT = 74;
  /** RegularExpression Id. */
  int FORALL = 75;
  /** RegularExpression Id. */
  int EXISTS = 76;
  /** RegularExpression Id. */
  int CHOOSE = 77;
  /** RegularExpression Id. */
  int BOX = 78;
  /** RegularExpression Id. */
  int DIAMOND = 79;
  /** RegularExpression Id. */
  int EXCEPT = 80;
  /** RegularExpression Id. */
  int ARROW = 81;
  /** RegularExpression Id. */
  int MAPSTO = 82;
  /** RegularExpression Id. */
  int BANG = 83;
  /** RegularExpression Id. */
  int PSTRING = 84;
  /** RegularExpression Id. */
  int EIF = 85;
  /** RegularExpression Id. */
  int ETHEN = 86;
  /** RegularExpression Id. */
  int EELSE = 87;
  /** RegularExpression Id. */
  int ECASE = 88;
  /** RegularExpression Id. */
  int EOTHER = 89;
  /** RegularExpression Id. */
  int LET = 90;
  /** RegularExpression Id. */
  int LETIN = 91;
  /** RegularExpression Id. */
  int DOMAIN = 92;
  /** RegularExpression Id. */
  int SUBSET = 93;
  /** RegularExpression Id. */
  int UNION = 94;
  /** RegularExpression Id. */
  int MINUS = 95;
  /** RegularExpression Id. */
  int Main = 96;
  /** RegularExpression Id. */
  int NUMBER = 97;
  /** RegularExpression Id. */
  int NAME = 98;
  /** RegularExpression Id. */
  int ALPHA = 99;
  /** RegularExpression Id. */
  int DIGIT = 100;
  /** RegularExpression Id. */
  int OTHER = 101;
  /** RegularExpression Id. */
  int POSTFIX = 102;
  /** RegularExpression Id. */
  int INFIX = 103;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;
  /** Lexical state. */
  int WithinString = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(*\"",
    "\"*)\"",
    "<token of kind 7>",
    "\"\\\"\"",
    "\"\\\"\"",
    "<token of kind 10>",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\"@\"",
    "\"_\"",
    "\":=\"",
    "\"==\"",
    "\"=\"",
    "\"~=\"",
    "\"\\\\in\"",
    "\"\\\\notin\"",
    "\"||\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"<<\"",
    "\">>\"",
    "\"extends\"",
    "\"algorithm\"",
    "<VARIABLE>",
    "\"def\"",
    "\"function\"",
    "\"procedure\"",
    "\"definition\"",
    "\"process\"",
    "\"thread\"",
    "\"fair\"",
    "<STRONG>",
    "\"symmetric\"",
    "\"begin\"",
    "\"end\"",
    "\"skip\"",
    "\"atomic\"",
    "\"if\"",
    "\"elsif\"",
    "\"either\"",
    "\"when\"",
    "\"branch\"",
    "\"or\"",
    "\"then\"",
    "\"else\"",
    "\"loop\"",
    "\"for\"",
    "\"with\"",
    "\"assert\"",
    "\"print\"",
    "\"return\"",
    "\"goto\"",
    "\"break\"",
    "\"run\"",
    "\"invariant\"",
    "\"temporal\"",
    "<CONSTANT>",
    "\"constraint\"",
    "\"self\"",
    "\"super\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"BOOLEAN\"",
    "<LNOT>",
    "\"\\\\A\"",
    "\"\\\\E\"",
    "\"CHOOSE\"",
    "\"[]\"",
    "\"<>\"",
    "\"EXCEPT\"",
    "\"->\"",
    "\"|->\"",
    "\"!\"",
    "\"STRING\"",
    "\"IF\"",
    "\"THEN\"",
    "\"ELSE\"",
    "\"CASE\"",
    "\"OTHER\"",
    "\"LET\"",
    "\"IN\"",
    "\"DOMAIN\"",
    "\"SUBSET\"",
    "\"UNION\"",
    "\"-\"",
    "\"Main\"",
    "<NUMBER>",
    "<NAME>",
    "<ALPHA>",
    "<DIGIT>",
    "<OTHER>",
    "<POSTFIX>",
    "\"$$$\"",
    "\"=>\"",
    "\"~>\"",
    "\"<=>\"",
    "\"\\\\equiv\"",
    "\"-+->\"",
    "\"\\\\/\"",
    "\"/\\\\\"",
    "\"#\"",
    "\"/=\"",
    "\"-|\"",
    "\"::=\"",
    "\"<\"",
    "\"=|\"",
    "\">\"",
    "\"\\\\approx\"",
    "\"\\\\asymp\"",
    "\"\\\\cong\"",
    "\"\\\\doteq\"",
    "\"\\\\geq\"",
    "\">=\"",
    "\"\\\\gg\"",
    "\"\\\\leq\"",
    "\"=<\"",
    "\"<=\"",
    "\"\\\\ll\"",
    "\"\\\\prec\"",
    "\"\\\\preceq\"",
    "\"\\\\propto\"",
    "\"\\\\sim\"",
    "\"\\\\simeq\"",
    "\"\\\\sqsubset\"",
    "\"\\\\sqsubseteq\"",
    "\"\\\\sqsupset\"",
    "\"\\\\sqsupseteq\"",
    "\"\\\\subset\"",
    "\"\\\\subseteq\"",
    "\"\\\\succ\"",
    "\"\\\\succeq\"",
    "\"\\\\supset\"",
    "\"\\\\supseteq\"",
    "\"|-\"",
    "\"|=\"",
    "\"\\\\cdot\"",
    "\"@@\"",
    "\":>\"",
    "\"<:\"",
    "\"\\\\\"",
    "\"\\\\cap\"",
    "\"\\\\intersect\"",
    "\"\\\\cup\"",
    "\"\\\\union\"",
    "\"..\"",
    "\"...\"",
    "\"%\"",
    "\"++\"",
    "\"+\"",
    "\"(+)\"",
    "\"\\\\oplus\"",
    "\"%%\"",
    "\"|\"",
    "\"--\"",
    "\"(-)\"",
    "\"//\"",
    "\"/\"",
    "\"(/)\"",
    "\"\\\\oslash\"",
    "\"\\\\div\"",
    "\"&\"",
    "\"&&\"",
    "\"*\"",
    "\"**\"",
    "\"(.)\"",
    "\"\\\\odot\"",
    "\"(\\\\X)\"",
    "\"\\\\otimes\"",
    "\"\\\\bigcirc\"",
    "\"\\\\bullet\"",
    "\"\\\\o\"",
    "\"\\\\circ\"",
    "\"\\\\star\"",
    "\"!!\"",
    "\"\\\\wr\"",
    "\"##\"",
    "\"$\"",
    "\"$$\"",
    "\"??\"",
    "\"\\\\sqcap\"",
    "\"\\\\sqcup\"",
    "\"\\\\uplus\"",
    "\"^\"",
    "\"^^\"",
  };

}
