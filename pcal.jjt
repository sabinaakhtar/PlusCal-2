/**
 * JavaCC grammar for +CAL 2.0.
 * Copyright INRIA
 * BSD license
 * Authors: Sabina Akhtar, Stephan Merz, and Martin Quinson
 **/
options
{
	JDK_VERSION = "1.5";
	MULTI = true;
	NODE_SCOPE_HOOK = true;

	// MQ: I use STATIC=false to turn of the tons of "static method should be accessed in a static way"
	//   errors that javac spits on the code generated by javacc without this.
	// It sounds like an easy bug of javacc, so it could get fixed one day.
	// We could just try turning this on again from time to time (after all, that the default value even if I've no idea of the impact).
	STATIC = false;
	//NODE_DEFAULT_VOID = true;

}
PARSER_BEGIN(pcal)

import java.io.*;

public class pcal {

	void jjtreeOpenNodeScope(Node n) {
		((SimpleNode)n).firstToken = getToken(1);
	}
	void jjtreeCloseNodeScope(Node n) {
		((SimpleNode)n).lastToken = getToken(0);
	}
	
	public static String test(String input, String name) 
		throws ParseException {
		
		InputStream in = new ByteArrayInputStream (input.getBytes());
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		translate(in,out,name, "");
		return out.toString();
	}

	public static void translate(InputStream in, OutputStream out, String name, String arg1) 
		throws ParseException {
		
		pcal parser = new pcal(in);
		
		PcalTranslator translator = new PcalTranslator();
		PcalTLAGenerator generator = new PcalTLAGenerator();
		PcalNormalizer normalizer = new PcalNormalizer();
		ASTsourcefile nodes = null;
		st = new SymbolTable();    
		nodes = parser.sourcefile();
		System.out.println("Normalizing...");
		normalizer.start(nodes);

		boolean nowarning = false;
		if(arg1.equals("-nowarnings"))
			nowarning = true;
		
		System.out.println("Translating...");
		ExplodedTree tree = translator.start(nodes, nowarning);
		

		generator.start(tree, out, name);		

	}
	
	public static SymbolTable st;  
	public static void main(String args[]) throws java.io.IOException, ParseException {

		if (args.length < 1 || args.length > 2) {
			usage();
			System.exit(1);
		}
		else if(args.length == 2 && !args[1].equals("-nowarnings"))
		{
			usage();
			System.exit(1);
		}

		String fileName = new String();

		InputStream in = null;
		OutputStream out = null;
		
		try {
				in = new java.io.FileInputStream(args[0]);
				out = new ByteArrayOutputStream();
				if(args.length == 1)
					translate(in, out, args[0], "");
				else if(args.length == 2)
					translate(in, out, args[0], args[1]);
			} catch (java.io.FileNotFoundException e) {
				System.out.println("File " + args[0] + " not found, exiting.");
				System.exit(1);
			}		
 	}

	static void usage() {
		System.out.println("usage: java pcal <input file> <-nowarnings>");
	}

} // end class pcal

PARSER_END(pcal)

SKIP :
{
	" "
	| "\t"
	| "\n"
	| "\r"
}

// -------------------- comments (see JavaCC documentation) ----------------

SKIP :
{
		"(*" : WithinComment
}

	<WithinComment> SKIP :
	{
		<"*)"> : DEFAULT
	}

	<WithinComment> MORE:
	{
		< ~[] >
	}

	// -------------------- strings ----------------------------------------

	SKIP :
	{
		"\"" : WithinString
	}

	<WithinString> TOKEN :
	{
		<STRING:  "\"">  // delete trailing quotes
		{ matchedToken.image = image.toString().substring(0, image.length()-1); }
		: DEFAULT
	}

	<WithinString> MORE :
	{
		< ~["\"", "\n", "\r"] >
	}

	// -------------------- default token class ------------------------------

	TOKEN : /* keywords and separators */
	{
		< COMMA:         "," >
		| < SEMICOLON:     ";" >
		| < COLON:         ":" >
		| < DOT:           "." >
		| < AT:            "@" >
		| < UNDERSCORE:    "_" >
		| < ASSIGN:        ":=" >
		| < DEQ:           "==" >
		| < EQUAL:         "=" >
		| < NEQUAL:        "~=" >
		| < IN:            "\\in" >
		| < NOTIN:         "\\notin" >
		| < PARALLEL:      "||" >
		| < LPAR:          "(" >
		| < RPAR:          ")" >
		| < LBRAKK:        "[" >
		| < RBRAKK:        "]" >
		| < LBRACE:        "{" >
		| < RBRACE:        "}" >
		| < LTUPLE:        "<<" >
		| < RTUPLE:        ">>" >
		| < EXTENDS:       "extends" >
		| < ALGORITHM:     "algorithm" >
		| < VARIABLE:      "variable" | "variables" >
		| < DEF:           "def" >
		| < FUNCTION:      "function" >
		| < PROCEDURE:     "procedure" >
		| < DEFINITION:    "definition" >
		| < PROCESS:       "process" >
		| < THREAD:        "thread" >
		| < FAIR:          "fair" >
		| < STRONG:        "strong" | "strongly" >
		| < SYMMETRY:      "symmetric" >
		| < BEGIN:         "begin" >
		| < END:           "end" >
		| < PSKIP:         "skip" >
		| < ATOMIC:        "atomic" >
		| < IF:            "if" >
		| < ELSIF:         "elsif" >
		| < EITHER:        "either" >
		| < WHEN:          "when" >
		| < BRANCH:        "branch" >
		| < OR:            "or" >
		| < THEN:          "then" >
		| < ELSE:          "else" >
		| < LOOP:          "loop" >
		| < FOR:           "for" >
		| < WITH:          "with" >
		| < ASSERT:        "assert" >
		| < PRINT:         "print" >
		| < RETURN:        "return" >
		| < GOTO:          "goto" >
		| < BREAK:         "break" >
		| < RUN:           "run" >
		| < INVARIANT:     "invariant" >
		| < TEMPORAL:      "temporal" >
		| < CONSTANT:      "constant" | "constants" >
		| < CONSTRAINT:    "constraint" >
		| < SELF:          "self" >
		| < SUPER:          "super" >
	}

	TOKEN : /* expression syntax, including state formulas */
	{
		< TRUE :          "TRUE" >
		| < FALSE :         "FALSE" >
		| < BOOLEAN :       "BOOLEAN" >
		/*  | < LAND :          "/\\" >
  | < LOR :           "\\/" >*/
		| < LNOT :          "~" | "\\lnot" | "\\neg" >
		/*  | < LIMP :          "=>" >
  | < LEQUIV :        "<=>" | "\\equiv" >*/
		| < FORALL :        "\\A" >
		| < EXISTS :        "\\E" >
		| < CHOOSE :        "CHOOSE" >
		| < BOX :           "[]" >
		| < DIAMOND :       "<>" >
		| < EXCEPT :        "EXCEPT" >
		| < ARROW :         "->" >
		| < MAPSTO :        "|->" >
		| < BANG :          "!" >
		| < PSTRING :       "STRING" >
		| < EIF :           "IF" >      // conditional expressions
		| < ETHEN :         "THEN" >
		| < EELSE :         "ELSE" >
		| < ECASE :         "CASE" >
		| < EOTHER :        "OTHER" >
		| < LET :           "LET" >
		| < LETIN :         "IN" >
		| < DOMAIN :        "DOMAIN" >
		| < SUBSET :        "SUBSET" >
		| < UNION :         "UNION" >
		| < MINUS :         "-" >
		| < Main :         "Main" >
	}

	/*
SA:I moved the token NUMBER above the token NAME because the
lexical analyzer was creating token DIGIT for the numbers.
BUT, now it wont make a difference because i gave DIGIT a
local definition.
	 */
	TOKEN : /* numeric constants */
	{
		< NUMBER :  (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
	}
	/*
SA:I changed the grammar for variables because in the previous
one, we could have a number or _ as a variable as well.
# is used to give local definitions.
	 */
	TOKEN : /* variables and labels */
	{
			< NAME:     ( <ALPHA> ( <ALPHA> | <DIGIT> | <OTHER> )* ) >
			| < #ALPHA:    ["a" - "z", "A" - "Z"] >
			| < #DIGIT:    ["0" - "9"] >
			| < #OTHER:    ["_"] >
	}

		//TOKEN : /* TLA+ prefix operators: cf. p.278 */
		//{
		//  <PREFIX:   "-" | <LNOT> | "DOMAIN" | "SUBSET" | "UNION" | /*<BOX> |*/ "<>" >
		//}

		TOKEN : /* TLA+ postfix operators: cf. p.278, except ',
           which is illegal in +CAL expressions */
		{
		<POSTFIX:  "^+" | "^*" | "^#" >
		}

	TOKEN : /* TLA+ infix operators: cf. p.278 */
	{
			<INFIX:   "$$$"  >
	}

		// ------------------------------ toplevel structure --------------------------
		ASTsourcefile sourcefile() :
		{}
		{
			( model() )?
					( instance() )?
							<EOF>
			{ //st.showWarnings();
				System.out.println("Parsing complete.");
			}
			{ return jjtThis; }
		}

		void model() :
		{}
		{
			header()
			algorithm()
			//  footer()
		}

		/** TODO imports: to be defined
void header():
{}
{
  modelId()
  ( tlaModule() )*
  ( pcalModule() )*
}
		 */
		void header() :
		{}
		{
			algorithmName()
			( header_extends() )?
					( header_constants() )?
		}

		void algorithmName() :
		{ Token t; }
		{
			( <ALGORITHM> t = <NAME> )
			{ 
				st.addSymbol(t.image, "algorithm", ""); 
				jjtThis.setName(t.image);
			}
		}

		void header_extends() :
		{}
		{
			<EXTENDS> <NAME> ( <COMMA> <NAME> )*
		}
		void header_constants() :
		{ Token t;}
		{
			<CONSTANT> 
			t = <NAME> 
			{ st.addSymbol(t.image, "constant", ""); }    
			( 
					<COMMA> 
					t = <NAME> 
					{ st.addSymbol(t.image, "constant", ""); } 
			)* 
		}

		/* TODO
void footer()
{}
{
// what goes here????
}
		 */

		// ------------------------------ algorithm syntax --------------------------

		void algorithm() :
		{}
		{
			declarations()
			( process() )*
			(
					<BEGIN>  // main code of algorithm
					statements()
			)?
					(LOOKAHEAD(3) <END> ( property() )+)?

							<END> ( <ALGORITHM> )?
									( property() )*

		}

		void process() :
		{ Token t; }
		{
			symmetry()
			fairness()          {jjtreeOpenNodeScope(jjtThis);}
			<PROCESS> 
			t = <NAME>          { st.addSymbol(t.image, "process",""); }
			processHeader()       { st.checkExistenceAddMethod(t.image, "process", "line " + t.beginLine + ", column " + t.beginColumn); }

			declarations()
			( process() )*
			(
					<BEGIN>  // main code of process
					statements()
			)?
			(LOOKAHEAD(3) <END> ( property() )+)?
					<END> ( LOOKAHEAD(2) <PROCESS> )?  // end process vs. end \n process Foo
							propertySectionOutsideProcess()
							{ st.popLastFrame(); }
		}
		void propertySectionOutsideProcess() :
		{}
		{
			( property() )*
		}
		/*
void thread() :
{ Token t; }
{
  symmetry()
  fairness()
  <THREAD> 
  t = <NAME> 
  { st.addSymbol(t.image, "thread", ""); }
  ( paramDecls() )?
  declarations()
  <BEGIN>  // main code of thread
  statements()
  <END> ( LOOKAHEAD(2) <THREAD> )?  // end thread vs. end \n thread Bar
  ( property() )*
  { st.popLastFrame(); }
}
		 */
		// ------------------------------ declarations -----------------------------

		void declarations() :
		{}
		{
			(
					varDecls()
					|
					defDecl()
					|
					functDecl()
			)*
		}

		void varDecls():
		{}
		{
			<VARIABLE>
			varDecl()
			( <COMMA> varDecl() )*
		}

		void varDecl() :
		{
			Token t;
		}
		{
			t = <NAME>
			{ st.addSymbol(t.image, "variable", ""); jjtThis.setName(t.image);}    
			( <EQUAL> expression() )?   // must be constant expression
		}

		void processHeader():
		{ Token t; }
		{
			<LBRAKK>
			expression()
			// {st.checkDeclaration(t.image, "variable", 0, "line " + t.beginLine + ", column " + t.beginColumn);} )
			<RBRAKK>
			//    ( <EQUAL> expression() )
			//    |
			//    ( <IN> expression() )
		}

		void processDeclSetExpression() # void:
		{}
		{
			<LBRACE>
			(
					expression()
					(
							setEnumeration()
					)?
			)?
					<RBRACE>
		}

		void defDecl() :
		{
			Token t;
		}
		{
			<DEFINITION>
			t = <NAME>
			{ st.addSymbol(t.image, "definition", ""); }
			( paramDecls() )?
					{ st.checkExistenceAddMethod(t.image, "definition", "line " + t.beginLine + ", column " + t.beginColumn); }
			<DEQ>
			expression()
			( <SEMICOLON> )?
					{ st.popLastFrame(); }
		}

		void functDecl() :
		{
			Token t,t_func_proc;
		}
		{
			(t_func_proc = <PROCEDURE> )
			t = <NAME>
			{ st.addSymbol(t.image, t_func_proc.image, ""); }
			paramDecls()
			{ st.checkExistenceAddMethod(t.image, t_func_proc.image, "line " + t.beginLine + ", column " + t.beginColumn); }
			( varDecls() )?
					<BEGIN>  // main code of function
			statements()
			<END> ( LOOKAHEAD(2) (<PROCEDURE>) )?  // end procedure vs. end \n procedure g()
					{ st.popLastFrame(); }
		}

		void paramDecls():
		{}
		{
			<LPAR>
			( paramDecl()
					( <COMMA> paramDecl() )*
			)?
					<RPAR>
		}

		void paramDecl() :
		{ Token t; }
		{
			t = <NAME>
			{ st.addSymbol(t.image, "parameter", ""); }  
			( <DEQ> expression() )?      // must be constant expression

		}

		int paramInstances() :
		{
			int noofparameters = 0;
		}
		{
			<LPAR>
			( paramInstance()
					{noofparameters = 1; }
			( <COMMA> paramInstance() { noofparameters++; } )*
			)?
					<RPAR>
			{ return noofparameters; }
		}

		void paramInstance() :
		{ Token t; }
		{
			( LOOKAHEAD(2)   // distinguish expression foo from foo == 5
					t = <NAME> <DEQ> 
			{ st.checkDeclaration(t.image, "variable", 0, "line " + t.beginLine + ", column " + t.beginColumn); }
			)?
					expression()
		}
		// --------------------------Try Definitions--------------------------------

		void PREFIX() :
		{}
		{
			<MINUS> | <LNOT> | <DOMAIN> | <SUBSET> | <UNION> | <BOX> | <DIAMOND> 
		}

		// ------------------------------ statements ----------------------------

		void statements() : // non-null sequence of statements separated by ";"
		{}
		{
			statement()
			( LOOKAHEAD(2)  // optional semicolon at end of list generates choice conflict
					<SEMICOLON>
			statement()
			)*
			( <SEMICOLON> )?
		}

		void statement() :
		{Token t = null;}
		{
			( LOOKAHEAD(2)   // distinguish foo : stmt from foo := bar+1
					fairness()
					t = <NAME>   // label
			{ st.checkLabelExistence(t.image); } 
			<COLON>
			)?
					instruction()

		}

		void instruction() :
		{}
		{
			skip()
			| atomic()
			| LOOKAHEAD(2)  // distinguish f(x,y) from f := x+1
			procedureCall()
			| assign()
			| branch()
			| ifelse()
			| when()
			| either()
			| loop()
			| foreach()
			| with()
			| pAssert()
			| print()
			| pReturn()
			| pGoto()
			| pBreak()
		}

		void skip() :
		{}
		{
			<PSKIP>
		}

		void atomic() :
		{}
		{
			<ATOMIC>
			statements()
			<END> ( <ATOMIC> )?
		}

		void assign() # void:
		{}
		{
			assignSingle()
			(
					<PARALLEL>
					assignSingle()
			)*
		}

		void assignSingle() :
		{}
		{
			assignLHS()
			<ASSIGN>
			(
					expression()
					|
					run()       // run process and assign ID to variable
			)
		}

		void assignLHS() :
		{
			Token t;
		}
		{
			t = <NAME>      // verify definedness of variable in current scope
			{
				//commented to change warning stage
				st.checkDeclaration(t.image, "variable", 0, "line " + t.beginLine + ", column " + t.beginColumn);
			}
			( selector() )*
		}

		void selector() :
		{}
		{
			( // array selector
					<LBRAKK>
					expression()
					(
							<COMMA>
							expression()
					)*
					<RBRAKK>
			)
			|
			( // record selector
					<DOT>
					<NAME>
			)
		}
		void ifelse() :
		{}
		{
			<IF>
			branchArm()
			(
					LOOKAHEAD(2)
					(<ELSE> <IF> | <ELSIF>)
					branchArm()
			)*
			(
					<ELSE>
					statements()
			)?
					<END> ( <IF> )?
		}
		void when() :
		{}
		{
			<WHEN> expression()
		}
		void either() :
		{}
		{
			<EITHER>
			statements()
			(
					<OR>
					statements()
			)*
			<END> ( <EITHER> )?
		}
		void branch() :
		{}
		{
			<BRANCH>
			branchArm()
			(
					<OR>
					branchArm()
			)*

			(
					<ELSE>
					statements()
					//    <END>
			)?
					<END> ( <BRANCH> )?
		}

		void branchArm() :
		{}
		{
			expression()
			<THEN>
			statements()
			//  <END>
		}

		void loop() :
		{}
		{
			<LOOP>
			statements()
			<END> ( <LOOP> )?
		}

		void foreach() :
		{
			Token t;
		}
		{
			<FOR> 
			t = <NAME> 
			{ st.addSymbol(t.image, "variable", ""); }
			//{ st.checkDeclaration(t.image, "variable", 0, "line " + t.beginLine + ", column " + t.beginColumn); }
			<IN> expression()
			statements()
			<END> ( <FOR> )?
					{ st.removeAuxVariable(t.image); }
		}

		void with() :
		{
			Token t;
		}
		{
			<WITH>
			t = <NAME>
			{ st.addSymbol(t.image, "variable", ""); }
			// { st.checkDeclaration(t.image, "variable", 0, "line " + t.beginLine + ", column " + t.beginColumn); }
			( <IN> | <EQUAL> ) 
			expression()
			statements()
			<END> ( <WITH> )?
					{ st.removeAuxVariable(t.image); }
		}

		void pAssert() :
		{}
		{
			<ASSERT>
			expression()
		}

		void print() :
		{}
		{
			<PRINT>
			expression()
		}

		void procedureCall() :
		{
			Token t;
			int noofparameters;
		}
		{
			t = <NAME>
			noofparameters = paramInstances()
			{ st.checkDeclaration(t.image, "function", noofparameters, "line " + t.beginLine + ", column " + t.beginColumn); }
		}

		void definitionCall() :
		{
			Token t;
			int noofparameters;
		}
		{
			t = <NAME>
			noofparameters = paramInstances()
			{ st.checkDeclaration(t.image, "definition", noofparameters, "line " + t.beginLine + ", column " + t.beginColumn); }
		}

		void pReturn() :
		{}
		{
			<RETURN>
			(
					expression()
			)?
		}

		void pGoto() :
		{}
		{
			<GOTO>
			<NAME>
		}

		void pBreak() :
		{}
		{
			<BREAK>
		}

		void run() :
		{ 
			Token t; 
			int noofparameters = 0;
		}
		{
			<RUN>
			( // optionally specify whether to run process or thread
					<PROCESS>
					|
					<THREAD>
			)?
					{jjtreeOpenNodeScope(jjtThis);}
			t = <NAME>
			( noofparameters = paramInstances() )?
					{ st.checkDeclaration(t.image, "process", noofparameters, "line " + t.beginLine + ", column " + t.beginColumn); }
		}

		// ------------------------ symmetry, fairness, property -------------------

		void symmetry() :
		{}
		{
			( <SYMMETRY> )?
		}

		void fairness() :
		{}
		{
			(
					( <STRONG> )?
							<FAIR>
			)?
		}

		void property() :
		{}
		{
			invariant()
			|
			temporal()
		}

		void invariant() :
		{}
		{
			<INVARIANT>
			expression()
		}

		void temporal() :
		{}
		{
			<TEMPORAL>
			expression()   //  tFormula()
		}

		void bounds() :
		{}
		{
			bound()
			(
					<COMMA>
					bound()
			)*
		}

		void bound() :
		{}
		{
			<NAME> ( <COMMA> <NAME> )*
			<IN>
			expression()
		}

		/*****
  The following was a valiant attempt to distinguish between
  temporal and non-temporal formulas. Seems too hard to be worthwhile.

  Priority levels for binary operators in temporal formulas:
  conjunction > disjunction > implication, equivalence

void tFormula() :
{}
{
  expression()
  (
    tQuantified()  
  |
    tImplicand()
    (
      ( <LIMP> | <LEQUIV> )
      tImplicand()
    )?
  )
}

void tQuantified() :
{}
{
  ( <FORALL> | <EXISTS> )
  bounds()     // unbounded quantification useless for model checking
  <COLON>
  tFormula()
}

void tImplicand() :
{}
{
  tDisjunct()
  (
    <LOR>
    tDisjunct()
  )*
}

void tDisjunct() :
{}
{
  tConjunct()
  (
    <LAND>
    tConjunct()
  )*
}

void tConjunct() :
{}
{
  (
    tUnary()
  |
    tAtomic()
  )
}

void tUnary() :
{}
{
  ( <LNOT> | <BOX> | <DIAMOND> )
  tConjunct()
}

void tAtomic() :
{}
{
  (
    expression()
  |
    <LPAR>
    tFormula()
    <RPAR>
  )
}

		 ****/

		// ------------------------------ instance syntax --------------------------

		void instance() :
		{}
		{
			(
					config()
			)+
		}

		void config() :
		{}
		{
			constantDefs()
			|
			constraint()  
		}

		void constantDefs() :
		{}
		{
			<CONSTANT>
			constantDef()
			(
					<COMMA>
					constantDef()
			)*
		}

		void constantDef() :
		{ Token t = null; }
		{
			t = <NAME> {st.updateConstantInitialization(t.image);}
			<EQUAL>
			expression()    // constant expression
		}

		void constraint() :
		{}
		{
			<CONSTRAINT>
			expression()
		}

		// ------------------------------ expression syntax ------------------------

		void expression() :
		{}
		{
			(
					quantExpression()
					|
					condExpression()
					|
					caseExpression()
					|
					letExpression()
					|
					exp1()
			)
		}

		// --------------------- improperly bracketed expressions ------------------
		// Quantified expressions as well as LET, CASE, and IF constructs are not
		// properly bracketed. They must be parenthesized when they appear as
		// subexpressions for disambiguation and are therefore handled separately
		// from standard expressions (see production exp1() below).

		void quantExpression() :  // only bounded quantification allowed here
		{}
		{
			( <FORALL> | <EXISTS> | <CHOOSE> )
			bounds()
			<COLON>
			expression()
		}

		void condExpression() :
		{}
		{
			<EIF>
			expression()
			<ETHEN>
			expression()
			<EELSE>
			expression()
		}

		void caseExpression() :
			/* CASE in TLA+ has the "dangling else" problem because the
   OTHER clause is optional. The LOOKAHEAD specifications
   below suppress a warning to that effect, and the
   interpretation of the expression
     CASE P -> CASE Q -> 0 [] R -> 1 OTHER  -> 2
   associates the second arm and the OTHER clause to the 
   inner case expression:
     CASE P ->
       CASE Q -> 0
       []   R -> 1
       OTHER  -> 2
   which is presumably what the author intended.
			 */
		{}
		{
			<ECASE>
			caseArm()
			( 
					LOOKAHEAD(1)
					<BOX> caseArm()
			)*
			( LOOKAHEAD(1)
					<EOTHER> <ARROW> expression()
			)?
		}

		void caseArm() :
		{}
		{
			expression()
			<ARROW>
			expression()
		}

		void letExpression() :
		{}
		{
			<LET>
			( LOOKAHEAD(2)
					functionDefinition()
					|
					operatorDefinition()
			)+
			<LETIN>
			expression()
		}

		void operatorDefinition() :
		{}
		{
			(
					PREFIX() <NAME>
					|
					LOOKAHEAD(2)
					<NAME> <INFIX> <NAME>
					|
					LOOKAHEAD(2)
					<NAME> <POSTFIX>
					|
					nonfixLHS()   // Foo(a, Op(_,_), _ $$ _)
			)
			<DEQ>
			expression()
		}

		void nonfixLHS() :
		{}
		{
			<NAME>
			(
					<LPAR>
					idOrOpdecl()
					(
							<COMMA> idOrOpdecl()
					)*
					<RPAR>
			)?
		}

		void idOrOpdecl() :
		{}
		{
			(
					<NAME>
					(
							<LPAR>
							<UNDERSCORE>
							(
									<COMMA> <UNDERSCORE>
							)*
							<RPAR>
					)?
							|
							PREFIX() <UNDERSCORE>
					|
					LOOKAHEAD(2)
					<UNDERSCORE> <INFIX> <UNDERSCORE>
					|
					<UNDERSCORE> <POSTFIX>
			)
		}

		void functionDefinition() :
		{}
		{
			<NAME>
			<LBRAKK>
			bounds()
			<RBRAKK>
			<DEQ>
			expression()
		}

		//--------------------- (possibly) infix expressions --------------------------
		/*
  Infix expressions with operator priorities: see Chapter 15.2.1
  of the TLA+ book for an explanation.
		 */
		void exp1() # void:
		{}
		{
			(
					exp2() {jjtreeOpenNodeScope(jjtThis);} ( ("=>") exp2() )? 
			) #infixOperator(>1)
		}

		void exp2() # void:
		{}
		{
			(
					exp3() {jjtreeOpenNodeScope(jjtThis);} ( ("~>" | "<=>" | "\\equiv" | "-+->") exp3() )?
			) #infixOperator(>1)
		}

		void exp3() # void:
		{}
		{
			(
					exp4_branch() {jjtreeOpenNodeScope(jjtThis);} ( ("\\/" | "/\\") exp4_branch() )*
			) #infixOperator(>1)
		}

		void exp4_branch() # void:
		{}
		{
			LOOKAHEAD(exp4to15noLeftAssoc())
			exp4to15noLeftAssoc()
			|
			exp4()
		}

		void exp4to15noLeftAssoc() # void :
		{Token t = null;}
		{
			({jjtreeOpenNodeScope(jjtThis);} 
			(t = <BOX> | t = <DIAMOND>) exp17()
			) #prefixOperator(t != null)
		}

		void exp4() # void:
		{Token t = null;}
		{
			({jjtreeOpenNodeScope(jjtThis);} 
			(t = <LNOT>)? exp5()
			) #prefixOperator(t != null)
		}

		void exp5() # void:
		{}
		{
			LOOKAHEAD(exp5a())
			exp5a()
			|
			exp5b()
		}

		void exp5a() # void:
		{}
		{
			(
					exp6() {jjtreeOpenNodeScope(jjtThis);} 
					("@" | "#" | "/=" | "-|" | "::=" | "<" | "=" | "=|" | ">" | "\\approx" | "\\asymp" | "\\cong" | "\\doteq" | "\\geq" | ">=" | "\\gg" | "\\in" | "\\notin" | "\\leq" | "=<" | "<=" | "\\ll" | "\\prec" | "\\preceq" | "\\propto" | "\\sim" | "\\simeq" | "\\sqsubset" | "\\sqsubseteq" | "\\sqsupset" | "\\sqsupseteq" | "\\subset" | "\\subseteq" | "\\succ" | "\\succeq" | "\\supset" | "\\supseteq" | "|-" | "|=")
					exp6()
			) #infixOperator(>1)
		}

		void exp5b() # void:
		{}
		{
			(
					exp6() {jjtreeOpenNodeScope(jjtThis);} ( ("\\cdot") exp6() )*
			) #infixOperator(>1)
		}

		void exp6() # void:
		{}
		{
			(
					exp7() {jjtreeOpenNodeScope(jjtThis);} ( ("@@") exp7() )*
			) #infixOperator(>1)
		}

		void exp7() # void:
		{}
		{
			(
					exp8() {jjtreeOpenNodeScope(jjtThis);} ( (":>" | "<:") exp8() )?
			) #infixOperator(>1)
		}

		void exp8() # void:
		{}
		{
			LOOKAHEAD(exp8noLeftAssoc())
			exp8noLeftAssoc()
			|
			exp8LeftAssoc()
		}

		void exp8noLeftAssoc() # void:
		{}
		{
			(
					exp9() {jjtreeOpenNodeScope(jjtThis);} ("\\") exp9()
			) #infixOperator(>1)
		}

		void exp8LeftAssoc() # void:
		{}
		{
			(
					exp9() {jjtreeOpenNodeScope(jjtThis);} ( ("\\cap" | "\\intersect" | "\\cup" | "\\union") exp9() )*
			) #infixOperator(>1)
		}

		void exp9() # void:
		{}
		{
			LOOKAHEAD(exp9notLeftAssoc())
			exp9notLeftAssoc()
			|
			exp9to14_level_1()
		}

		void exp9notLeftAssoc() # void:
		{}
		{
			(
					exp9notLeftAssoc_branch() {jjtreeOpenNodeScope(jjtThis);} (".." | "...") exp9notLeftAssoc_branch()
			) #infixOperator(>1)
		}

		void exp9notLeftAssoc_branch() # void:
		{}
		{
			LOOKAHEAD(exp10to11notLeftAssoc())
			exp10to11notLeftAssoc()
			|
			exp10LeftAssoc_1()
		}

		void exp10to11notLeftAssoc() # void:
		{}
		{
			(
					exp12_1() {jjtreeOpenNodeScope(jjtThis);} ("%") exp12_1()
			) #infixOperator(>1)
		}

		void exp10LeftAssoc_1() # void:
		{}
		{
			(
					exp10to11LeftAssoc_1() {jjtreeOpenNodeScope(jjtThis);} ( ("++" | "+" | "(+)" | "\\oplus") exp10to11LeftAssoc_1() )*
			) #infixOperator(>1)
		}

		void exp10to11LeftAssoc_1() # void:
		{}
		{
			(
					exp11LeftAssoc_1() {jjtreeOpenNodeScope(jjtThis);} ( LOOKAHEAD(2) ("%%" | "|" ) exp11LeftAssoc_1() )*
			) #infixOperator(>1)
		}

		void exp11LeftAssoc_1() # void:
		{}
		{
			(
					exp12_1() {jjtreeOpenNodeScope(jjtThis);} ( LOOKAHEAD(2) ("-" | "--" | "(-)") exp12_1() )*
			) #infixOperator(>1)
		}

		void exp12_1() # void:
		{ Token t = null;}
		{
			({jjtreeOpenNodeScope(jjtThis);} 
			(LOOKAHEAD(2) t = <MINUS>)? exp13_branch()
			) #prefixOperator(t != null)
		}

		void exp13_branch() # void: 
		{}
		{
			LOOKAHEAD(exp13notLeftAssoc())
			exp13notLeftAssoc()
			|
			exp13LeftAssoc()
		}

		void exp13notLeftAssoc() # void:
		{}
		{
			(
					exp14() {jjtreeOpenNodeScope(jjtThis);} ("//" | "/" | "(/)" | "\\oslash" | "\\div") exp14()
			) #infixOperator(>1)
		}

		void exp13LeftAssoc() # void:
		{}
		{
			(
					exp14() {jjtreeOpenNodeScope(jjtThis);} ( ("&" | "&&" | "*" | "**" | "(.)" | "\\odot" | "(\\X)" | "\\otimes" | "\\bigcirc" | "\\bullet" | "\\o" | "\\circ" | "\\star") exp14() )*
			) #infixOperator(>1)
		}

		void exp9to14_level_1() # void:
		{}
		{
			LOOKAHEAD(expDoubleExclamation())
			expDoubleExclamation()
			|
			exp9to14_level_2()
		}

		void expDoubleExclamation() # void:
		{}
		{
			(
					exp14() {jjtreeOpenNodeScope(jjtThis);} ("!!") exp14()
			) #infixOperator(>1)
		}

		void exp9to14_level_2() # void:
		{}
		{
			LOOKAHEAD(expSymbol_wr())
			expSymbol_wr()
			|
			exp9to14_level_3()
		}

		void expSymbol_wr() # void:
		{}
		{
			(
					exp17() {jjtreeOpenNodeScope(jjtThis);} ("\\wr") exp17()
			) #infixOperator(>1)
		}

		void exp9to14_level_3() # void:
		{}
		{
			LOOKAHEAD(exp10to11Percent())
			exp10to11Percent()
			|
			exp9to14_level_4()
		}

		void exp10to11Percent() # void:
		{}
		{
			(
					exp12_1() {jjtreeOpenNodeScope(jjtThis);} ("%") exp12_1()
			) #infixOperator(>1)
		}

		void exp9to14_level_4() # void:
		{}
		{
			LOOKAHEAD(exp13notLeftAssoc())
			exp13notLeftAssoc()
			|
			exp10LeftAssoc_2()
		}

		void exp10LeftAssoc_2()# void:
		{}
		{
			(
					exp10to11LeftAssoc_2() {jjtreeOpenNodeScope(jjtThis);}( ("++" | "+" | "(+)" | "\\oplus") exp10to11LeftAssoc_2() )*
			) #infixOperator(>1)
		}

		void exp10to11LeftAssoc_2() # void:
		{}
		{
			(
					exp11LeftAssoc_2() {jjtreeOpenNodeScope(jjtThis);} ( LOOKAHEAD(2) ("%%" | "|" ) exp11LeftAssoc_2() )*
			) #infixOperator(>1)
		}

		void exp11LeftAssoc_2() # void:
		{}
		{
			(
					exp12_2() {jjtreeOpenNodeScope(jjtThis);}( LOOKAHEAD(2) ("-" | "--" | "(-)") exp12_2() )*
			) #infixOperator(>1)
		}

		void exp12_2() # void:
		{ Token t = null;}
		{
			({jjtreeOpenNodeScope(jjtThis);} 
			(LOOKAHEAD(2) t = <MINUS>)? exp13LeftAssoc_2()
			) #prefixOperator(t != null)
		}

		void exp13LeftAssoc_2() # void:
		{}
		{
			(
					exp9to13LeftAssoc() {jjtreeOpenNodeScope(jjtThis);} ( ("&" | "&&" | "*" | "**" | "(.)" | "\\odot" | "(\\X)" | "\\otimes" | "\\bigcirc" | "\\bullet" | "\\o" | "\\circ" | "\\star") exp9to13LeftAssoc() )*
			) #infixOperator(>1)
		}

		void exp9to13LeftAssoc() # void:
		{}
		{
			(
					exp14() {jjtreeOpenNodeScope(jjtThis);} ( ("##" | "$" | "$$" | "??" | "\\sqcap" | "\\sqcup" | "\\uplus") exp14() )*
			) #infixOperator(>1)
		}

		void exp14() # void:
		{}
		{
			(
					exp15() {jjtreeOpenNodeScope(jjtThis);} ( ("^" | "^^") exp15() )? 
			) #infixOperator(>1)
		}

		void exp15() # void:
		{Token t = null;}
		{
			(
					exp17() {jjtreeOpenNodeScope(jjtThis);} ( t = <POSTFIX> )? 
			) #postfixOperator(t != null)
		}

		void exp17() # void:
		{}
		{
			(
					expLeaf() {jjtreeOpenNodeScope(jjtThis);} 
					// sm: generalized following line to list of selectors (?!)
					// ( <DOT> expLeaf() )?
					( selector() )*
			) #infixOperator(>1)
		}

		void expLeaf() # void:
		{}
		{
			( "(" expression() ")" ) 
			| 
			expAtomic()
		}

		void expAtomic() :
		{
			Token t;
			int noOfParameters = -1;

		}
		{
			(  // (pseudo-)constants -- NB: @ is acceptable only within EXCEPT
					( t = <Main> {jjtThis.setName("_main");} | t = <STRING> {jjtThis.setName("_text");} | t = <SELF> {jjtThis.setName("_self");} | t = <SUPER> (<LPAR> <NAME> <RPAR>)? {jjtThis.setName("_super");} | t = <NUMBER> {jjtThis.setName("_number");}| t = <TRUE> {jjtThis.setName("_true");} | t = <FALSE> {jjtThis.setName("_false");}| t = <AT> {jjtThis.setName("_at");})

					|LOOKAHEAD(3)
					// Foo(42)!Bar(x,y)
					t = <NAME>  
					(
							( noOfParameters = arguments() )?     // TLA+ operator application or function call
									(
											<BANG> <NAME>
											( arguments() )?
									)?
					)
					{
						if(noOfParameters == -1)
						{
							st.checkDeclaration(t.image, "variable", 0, "line " + t.beginLine + ", column " + t.beginColumn);
						}
						else
						{
							st.checkDeclaration(t.image, "definition", noOfParameters, "line " + t.beginLine + ", column " + t.beginColumn);
						}
						jjtThis.setName(t.image);
					}
					| 
					(<SUBSET> | <UNION> | <DOMAIN>) expLeaf() {jjtThis.setName("prefixOperator");}
					|
					setExpression() {jjtThis.setName("setExpression");}
					|
					functExpression() {jjtThis.setName("functExpression");}
					|
					tupleExpression() {jjtThis.setName("tupleExpression");}
			)
		}

		int arguments() :
			/* parenthesized list of expressions, possibly empty */
		{int noOfParameters = -1;}
		{
			<LPAR> {noOfParameters = 0;}
			(
					expression()
					{noOfParameters = 1;}
					(
							<COMMA> expression() {noOfParameters++;}
					)*
			)?
					<RPAR>
			{ return noOfParameters; }
		}

		// ------------------------------------------------------------------------
		// special kinds of atomic expressions: these are all properly bracketed
		// and therefore do not require parenthesizing for disambiguation

		// hard to read, but avoids choice conflict
		void setExpression() # void:
		{}
		{
			<LBRACE>
			(
					expression()
					(
							setEnumeration()
							|
							setComprehension()
					)?
			)?
					<RBRACE>
		}

		// enumerated set, without first element which has already been gobbled
		void setEnumeration() :
		{}
		{
			(
					<COMMA>
					expression()
			)+
		}

		// right-hand side of set comprehension: LHS has already been gobbled
		void setComprehension() :
		{}
		{
			// { x+y+z : x,y \in S, z \in T}  or  { x \in S : P(x) }
			// the following grammar rule generalizes this by allowing
			// a list of expressions on the RHS
			<COLON>
			expression()
			(
					<COMMA>
					expression()
			)*
		}

		void functExpression() # void:
		{}
		{
			<LBRAKK>
			(
					LOOKAHEAD(2)
					functConstruction()    // [x \in S, y \in T |-> x+y]
					|
					LOOKAHEAD(2)
					recordConstruction()   // [a |-> e1, b |-> e2]
					|
					LOOKAHEAD(2)
					recordSet()            // [a : S, b : T]
					|
					expression() 
					(
							functSet()           // [S -> T]
							|
							functExcept()        // [f EXCEPT ![x,y] = @+z]
					)
			)
			<RBRAKK>
		}

		void functConstruction() :  // [x \in S, y \in T |-> x+y]
		{}
		{
			bounds()
			<MAPSTO>
			expression()
		}

		void recordConstruction() :   // [a |-> e1, b |-> e2]
		{}
		{
			record()
			(
					<COMMA>
					record()
			)*
		}

		void record() :
		{}
		{
			<NAME> <MAPSTO> expression()
		}

		void functSet() :   // [S -> T], S has already been gobbled
		{}
		{
			<ARROW>
			expression()
		}

		void recordSet() :    // [a : S, b : T]
		{}
		{
			<NAME> <COLON> expression()
			(
					<COMMA>
					<NAME> <COLON> expression()
			)*
		}

		void functExcept() :   // [f EXCEPT ![x,y] = @+z], f has already been gobbled
		{}
		{
			<EXCEPT>
			override()
			(
					<COMMA> override()
			)*
		}

		void override():
		{}
		{
			<BANG>
			(
				(
					<LBRAKK>
					expression()
					(
							<COMMA> expression()
					)*
					<RBRAKK>
				)+
					|
					<DOT> <NAME>
			)
			<EQUAL>
			expression()
		}

		void tupleExpression() # void:
		{}
		{
			<LTUPLE>
			(
					expression()
					(
							<COMMA>
							expression()
					)*
			)?
					<RTUPLE>
		}

